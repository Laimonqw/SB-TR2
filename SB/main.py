import os
import asyncio
import nest_asyncio
nest_asyncio.apply()
from dotenv import load_dotenv
from telegram import Update, BotCommand
from telegram.ext import Application, CommandHandler, ContextTypes
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏–∑ .env
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")

# –§–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö
USERS_FILE = "users.txt"
REPEATS_FILE = "repeats.txt"

# ----------------- –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏ -----------------

def load_users() -> set:
    if not os.path.exists(USERS_FILE):
        return set()
    with open(USERS_FILE, "r") as f:
        return set(line.strip() for line in f if line.strip())

def save_user(chat_id: int):
    users = load_users()
    if str(chat_id) not in users:
        with open(USERS_FILE, "a") as f:
            f.write(f"{chat_id}\n")

def remove_user(chat_id: int):
    users = load_users()
    users.discard(str(chat_id))
    with open(USERS_FILE, "w") as f:
        for uid in users:
            f.write(f"{uid}\n")

def load_repeats() -> dict:
    if not os.path.exists(REPEATS_FILE):
        return {}
    with open(REPEATS_FILE, "r") as f:
        return {
            line.strip().split(":", 1)[0]: int(line.strip().split(":", 1)[1])
            for line in f if ":" in line
        }

def save_repeat(chat_id: int, count: int):
    data = load_repeats()
    data[str(chat_id)] = count
    with open(REPEATS_FILE, "w") as f:
        for uid, cnt in data.items():
            f.write(f"{uid}:{cnt}\n")

def get_user_repeat(chat_id: int) -> int:
    return load_repeats().get(str(chat_id), 1)

# ----------------- –ö–æ–º–∞–Ω–¥—ã -----------------

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    save_user(chat_id)
    await update.message.reply_text("‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")

async def stop_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    remove_user(chat_id)
    await update.message.reply_text("‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìã –ö–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –≤–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
        "/stop ‚Äî –æ—Ç–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
        "/replays <—á–∏—Å–ª–æ> ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–æ–≤\n"
        "/test ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞\n"
        
        "/help ‚Äî —Å–ø—Ä–∞–≤–∫–∞"
    )

async def test_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!")



async def replays_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    args = context.args

    if not args or not args[0].isdigit():
        await update.message.reply_text("‚ùó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /replays <—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10>")
        return

    count = int(args[0])
    if count < 1 or count > 10:
        await update.message.reply_text("‚ùó –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10.")
        return

    save_repeat(chat_id, count)
    await update.message.reply_text(f"üîÅ –ü–æ–≤—Ç–æ—Ä–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {count}")

# ----------------- –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è -----------------

async def send_reminders(app: Application):
    users = load_users()
    repeats = load_repeats()

    for user_id in users:
        repeat_count = repeats.get(user_id, 1)
        try:
            for i in range(repeat_count):
                await app.bot.send_message(chat_id=int(user_id), text="üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –∑–∞–π–¥–∏—Ç–µ –≤ –°—Ç–∞—Ä—Å –ë–∞–Ω–∫")
                if i + 1 < repeat_count:
                    await asyncio.sleep(10)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

# ----------------- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram –º–µ–Ω—é -----------------

async def on_startup(app: Application):
    commands = [BotCommand("start", "–í–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"),
        BotCommand("stop", "–û—Ç–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"),
        BotCommand("replays", "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–æ–≤"),
        BotCommand("test", "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞"),

        BotCommand("help", "–°–ø—Ä–∞–≤–∫–∞"),
    ]
    await app.bot.set_my_commands(commands)

# ----------------- –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è -----------------

async def main():
    app = Application.builder().token(TOKEN).post_init(on_startup).build()

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start_command))
    app.add_handler(CommandHandler("stop", stop_command))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("test", test_command))

    app.add_handler(CommandHandler("replays", replays_command))

    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler = AsyncIOScheduler()
    times = [(21, 1), (9, 1), (19, 1)]
    for hour, minute in times:
        scheduler.add_job(send_reminders, 'cron', hour=hour, minute=minute, args=[app])
    scheduler.start()

    print("–î–µ–Ω–∏—Å –∏–¥–∏ –Ω–∞—Ö—É–π –æ—Ç—Å—é–¥–∞.")
    await app.run_polling()


if __name__ == "__main__":
    import asyncio
    import nest_asyncio
    nest_asyncio.apply()
    asyncio.get_event_loop().run_until_complete(main())
